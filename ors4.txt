Q1)
#include<stdio.h>
#define MAX 20
int frames[MAX],ref[MAX],mem[MAX][MAX],faults,
 sp,m,n,count[MAX];
void accept()
{
int i;
printf("Enter no.of frames:");
scanf("%d", &n);
printf("Enter no.of references:");
scanf("%d", &m);
printf("Enter reference string:\n");
for(i=0;i<m;i++)
 {
 printf("[%d]=",i);
 scanf("%d",&ref[i]);
 }
}
void disp()
{
int i,j;
for(i=0;i<m;i++)
 printf("%3d",ref[i]);
printf("\n\n");
for(i=0;i<n;i++)
 {
 for(j=0;j<m;j++)
 {
 if(mem[i][j])
 printf("%3d",mem[i][j]);
 else
 printf(" ");
 }
 printf("\n");
 }
printf("Total Page Faults: %d\n",faults);
}
int search(int pno)
{
int i;
for(i=0;i<n;i++)
 {
 if(frames[i]==pno)
 return i;
 }
return -1;
}
int get_mfu(int sp)
{
int i,max_i,max=-9999;
 i=sp;
do
 {
 if(count[i]>max)
 {
 max = count[i];
 max_i = i;
 }
 i=(i+1)%n;
 }while(i!=sp);
return max_i;
}
void mfu()
{
int i,j,k;
for(i=0;i<m && sp<n;i++)
 {
 k=search(ref[i]);
 if(k==-1)
 {
 frames[sp]=ref[i];
count[sp]++;
 faults++;
 sp++;
 for(j=0;j<n;j++)
 mem[j][i]=frames[j];
 }
 else
 count[k]++;
 }
 sp=0;
for(;i<m;i++)
 {
 k = search(ref[i]);
 if(k==-1)
 {
 sp = get_mfu(sp);
frames[sp] = ref[i];
count[sp]=1;
 faults++;
 sp = (sp+1)%n;
 for(j=0;j<n;j++)
 mem[j][i] = frames[j];
 }
 else
 count[k]++;
 }
}

int main()
{
accept();
mfu();
disp();
return 0;
} 

Q2)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_CMD_LEN 1024
#define MAX_ARGS 100

void search_all_occurrences(const char *filename, const char *pattern) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("fopen");
        return;
    }

    char line[MAX_CMD_LEN];
    int line_number = 0;
    int found = 0;

    while (fgets(line, sizeof(line), file)) {
        line_number++;
        char *pos = line;
        while ((pos = strstr(pos, pattern)) != NULL) {
            found = 1;
            printf("Found in line %d: %s", line_number, line);
            pos += strlen(pattern);
        }
    }

    if (!found) {
        printf("Pattern not found in the file.\n");
    }

    fclose(file);
}

void count_occurrences(const char *filename, const char *pattern) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("fopen");
        return;
    }

    char line[MAX_CMD_LEN];
    int count = 0;

    while (fgets(line, sizeof(line), file)) {
        char *pos = line;
        while ((pos = strstr(pos, pattern)) != NULL) {
            count++;
            pos += strlen(pattern);
        }
    }

    printf("Total occurrences of pattern: %d\n", count);
    fclose(file);
}

int main() {
    char command[MAX_CMD_LEN];

    while (1) {
        printf("myshell$ ");
        if (fgets(command, sizeof(command), stdin) == NULL) {
            break;
        }

        command[strcspn(command, "\n")] = 0;

        char *args[MAX_ARGS];
        char *token = strtok(command, " ");
        int i = 0;

        while (token != NULL && i < MAX_ARGS - 1) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (i > 0 && strcmp(args[0], "search") == 0) {
            if (i < 4) {
                printf("Usage: search [a|c] filename pattern\n");
                continue;
            }

            const char *mode = args[1];
            const char *filename = args[2];
            const char *pattern = args[3];

            pid_t pid = fork();
            if (pid < 0) {
                perror("fork");
                continue;
            } else if (pid == 0) {
                if (strcmp(mode, "a") == 0) {
                    search_all_occurrences(filename, pattern);
                } else if (strcmp(mode, "c") == 0) {
                    count_occurrences(filename, pattern);
                } else {
                    printf("Invalid mode: %s. Use 'a' for all occurrences or 'c' for count.\n", mode);
                }
                exit(0);
            } else {
                wait(NULL);
            }
        } else {
            printf("Unknown command: %s\n", args[0]);
        }
    }

    return 0;
}
