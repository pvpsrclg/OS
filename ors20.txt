Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void typeline(char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    char line[256];
    while (fgets(line, sizeof(line), file)) {
        printf("%s", line);
    }

    fclose(file);
}

int main() {
    char command[256];

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = 0;

        char *token = strtok(command, " ");
        if (token != NULL && strcmp(token, "typeline") == 0) {
            token = strtok(NULL, " ");
            if (token != NULL && strcmp(token, "-a") == 0) {
                token = strtok(NULL, " ");
                if (token != NULL) {
                    pid_t pid = fork();
                    if (pid == 0) {
                        typeline(token);
                        exit(0);
                    } else if (pid < 0) {
                        perror("fork");
                    } else {
                        wait(NULL);
                    }
                } else {
                    printf("Usage: typeline -a filename\n");
                }
            } else {
                printf("Usage: typeline -a filename\n");
            }
        } else if (strcmp(command, "exit") == 0) {
            break;
        } else {
            printf("Command not recognized.\n");
        }
    }

    return 0;
}

Q2)
#include <stdio.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int waiting;
    int turnaround;
} Process;

void calculateSJF(Process processes[], int n) {
    int total_waiting = 0, total_turnaround = 0;
    int completed = 0;
    int time = 0;
    int gantt_chart[100];
    int gantt_index = 0;

    while (completed < n) {
        int idx = -1;
        int min_burst = 9999;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].burst > 0) {
                if (processes[i].burst < min_burst) {
                    min_burst = processes[i].burst;
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            gantt_chart[gantt_index++] = processes[idx].id;
            time += processes[idx].burst;
            processes[idx].waiting = time - processes[idx].arrival - processes[idx].burst;
            processes[idx].turnaround = time - processes[idx].arrival;
            total_waiting += processes[idx].waiting;
            total_turnaround += processes[idx].turnaround;
            processes[idx].burst = 0; 
            completed++;
        } else {
            time++;  
        }
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < gantt_index; i++) {
        printf("P%d ", gantt_chart[i]);
        if (i < gantt_index - 1) {
            printf("--> ");
        }
    }
    printf("\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for Process P%d: ", processes[i].id);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }

    calculateSJF(processes, n);
    return 0;
}
