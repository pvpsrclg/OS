Q1)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());
        sleep(5);
        printf("Child Process: PID = %d, Parent PID = %d (after sleep)\n", getpid(), getppid());
    } else {
        printf("Parent Process: PID = %d\n", getpid());
        sleep(2);
        printf("Parent Process: PID = %d is terminating now.\n", getpid());
        exit(0);
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10

void optimalPageReplacement(int reference[], int n, int frames) {
    int pageFrames[MAX_FRAMES] = {0};
    int pageFaults = 0;
    int pageHit = 0;

    for (int i = 0; i < n; i++) {
        int isPageFault = 1;

        for (int j = 0; j < frames; j++) {
            if (pageFrames[j] == reference[i]) {
                isPageFault = 0;
                pageHit++;
                break;
            }
        }

        if (isPageFault) {
            if (pageFrames[frames - 1] == 0) {
                for (int j = 0; j < frames; j++) {
                    if (pageFrames[j] == 0) {
                        pageFrames[j] = reference[i];
                        pageFaults++;
                        isPageFault = 0;
                        break;
                    }
                }
            }

            if (isPageFault) {
                int farthest = -1;
                int replaceIndex = -1;

                for (int j = 0; j < frames; j++) {
                    int k;
                    for (k = i + 1; k < n; k++) {
                        if (pageFrames[j] == reference[k]) {
                            if (k > farthest) {
                                farthest = k;
                                replaceIndex = j;
                            }
                            break;
                        }
                    }

                    if (k == n) {
                        replaceIndex = j;
                        break;
                    }
                }

                pageFrames[replaceIndex] = reference[i];
                pageFaults++;
            }
        }

        printf("Reference String: %d | Page Frames: ", reference[i]);
        for (int j = 0; j < frames; j++) {
            printf("%d ", pageFrames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
    printf("Total Page Hits: %d\n", pageHit);
}

int main() {
    int reference[] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6};
    int n = sizeof(reference) / sizeof(reference[0]);
    int frames;

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    optimalPageReplacement(reference, n, frames);
    return 0;
}
