Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>

void listFiles(char *dirname) {
    struct dirent *entry;
    DIR *dp = opendir(dirname);

    if (dp == NULL) {
        perror("opendir");
        return;
    }

    while ((entry = readdir(dp))) {
        if (entry->d_name[0] != '.') {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dp);
}

int main() {
    char command[256];

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);

        command[strcspn(command, "\n")] = 0;

        char *token = strtok(command, " ");
        if (token != NULL && strcmp(token, "list") == 0) {
            token = strtok(NULL, " ");
            if (token != NULL && strcmp(token, "f") == 0) {
                token = strtok(NULL, " ");
                if (token != NULL) {
                    pid_t pid = fork();
                    if (pid == 0) {
                        listFiles(token);
                        exit(0);
                    } else if (pid < 0) {
                        perror("fork");
                    } else {
                        wait(NULL);
                    }
                } else {
                    printf("Usage: list f dirname\n");
                }
            } else {
                printf("Usage: list f dirname\n");
            }
        } else if (strcmp(command, "exit") == 0) {
            break;
        } else {
            printf("Command not recognized.\n");
        }
    }

    return 0;
}

Q2)
#include <stdio.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int remaining;
    int waiting;
    int turnaround;
} Process;

void calculateRoundRobin(Process processes[], int n, int quantum) {
    int time = 0;
    int completed = 0;
    int gantt_chart[100];
    int gantt_index = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].remaining > 0) {
                gantt_chart[gantt_index++] = processes[i].id;

                if (processes[i].remaining > quantum) {
                    time += quantum;
                    processes[i].remaining -= quantum;
                } else {
                    time += processes[i].remaining;
                    processes[i].waiting = time - processes[i].arrival - processes[i].burst;
                    processes[i].turnaround = time - processes[i].arrival;
                    processes[i].remaining = 0;
                    completed++;
                }
            }
        }
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < gantt_index; i++) {
        printf("P%d ", gantt_chart[i]);
        if (i < gantt_index - 1) {
            printf("--> ");
        }
    }
    printf("\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");
    float total_waiting = 0, total_turnaround = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
        total_waiting += processes[i].waiting;
        total_turnaround += processes[i].turnaround;
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", total_waiting / n);
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for Process P%d: ", processes[i].id);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].remaining = processes[i].burst;
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    calculateRoundRobin(processes, n, quantum);
    return 0;
}
