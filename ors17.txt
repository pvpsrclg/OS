Q1)
#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10
#define MAX_PAGES 20

int findOptimal(int pages[], int n, int reference[], int reference_size, int frames) {
    int farthest = -1, index = -1;
    for (int i = 0; i < frames; i++) {
        int j;
        for (j = reference_size - 1; j >= 0; j--) {
            if (pages[i] == reference[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == -1) {
            return i; // Page not found in future reference
        }
    }
    return index; // Return the index of the page to replace
}

void optimalPageReplacement(int reference[], int reference_size, int frames) {
    int pages[MAX_FRAMES] = {-1};
    int page_faults = 0;

    for (int i = 0; i < reference_size; i++) {
        int page = reference[i];
        int found = 0;

        for (int j = 0; j < frames; j++) {
            if (pages[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (page_faults < frames) {
                pages[page_faults] = page; // Fill empty frame
            } else {
                int replace_index = findOptimal(pages, frames, &reference[i + 1], reference_size - i - 1, frames);
                pages[replace_index] = page; // Replace the optimal page
            }
            page_faults++;
            printf("Page fault: %d, Loaded: %d\n", page_faults, page);
        }
        
        printf("Current frames: ");
        for (int j = 0; j < frames; j++) {
            if (pages[j] != -1) {
                printf("%d ", pages[j]);
            }
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
}

int main() {
    int reference[] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6};
    int reference_size = sizeof(reference) / sizeof(reference[0]);
    int frames;

    printf("Enter number of frames (1 to %d): ", MAX_FRAMES);
    scanf("%d", &frames);

    if (frames < 1 || frames > MAX_FRAMES) {
        printf("Invalid number of frames.\n");
        return 1;
    }

    optimalPageReplacement(reference, reference_size, frames);
    return 0;
}

Q2)#include <stdio.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int waiting;
    int turnaround;
} Process;

void calculateFCFS(Process processes[], int n) {
    int total_waiting = 0, total_turnaround = 0;
    int gantt_chart[100];
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival) {
            current_time = processes[i].arrival;
        }
        gantt_chart[i] = processes[i].id;
        processes[i].waiting = current_time - processes[i].arrival;
        total_waiting += processes[i].waiting;
        current_time += processes[i].burst;
        processes[i].turnaround = processes[i].waiting + processes[i].burst;
        total_turnaround += processes[i].turnaround;
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d ", gantt_chart[i]);
        if (i < n - 1) {
            printf("--> ");
        }
    }
    printf("\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
printf("Enter arrival time and burst time for Process P%d: ", processes[i].id);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }

    calculateFCFS(processes, n);
    return 0;
}

