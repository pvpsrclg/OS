Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_CMD_LEN 1024
#define MAX_ARGS 100

void print_all_lines(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening file");
        return;
    }

    char line[MAX_CMD_LEN];
    while (fgets(line, sizeof(line), file)) {
        printf("%s", line);
    }

    fclose(file);
}

int main() {
    char command[MAX_CMD_LEN];

    while (1) {
        printf("myshell$ ");
        if (fgets(command, sizeof(command), stdin) == NULL) {
            break;
        }

        command[strcspn(command, "\n")] = 0;

        char *args[MAX_ARGS];
        char *token = strtok(command, " ");
        int i = 0;

        while (token != NULL && i < MAX_ARGS - 1) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (i > 0) {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Error creating child process");
                continue;
            } else if (pid == 0) {
                if (strcmp(args[0], "typeline") == 0 && i >= 3 && strcmp(args[1], "-a") == 0) {
                    print_all_lines(args[2]);
                } else {
                    printf("Unknown command: %s\n", args[0]);
                }
                exit(0);
            } else {
                wait(NULL);
            }
        }
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 100

typedef struct {
    int id;
    int arrival;
    int burst;
    int remaining;
    int turnaround;
    int waiting;
} Process;

void calculateTimes(Process processes[], int n, int time_quantum) {
    int total_time = 0, completed = 0;
    int gantt_chart[MAX_PROCESSES * 2];
    int index = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= total_time && processes[i].remaining > 0) {
                if (processes[i].remaining > time_quantum) {
                    gantt_chart[index++] = processes[i].id;
                    gantt_chart[index++] = time_quantum;
                    total_time += time_quantum;
                    processes[i].remaining -= time_quantum;
                } else {
                    gantt_chart[index++] = processes[i].id;
                    gantt_chart[index++] = processes[i].remaining;
                    total_time += processes[i].remaining;
                    processes[i].turnaround = total_time - processes[i].arrival;
                    processes[i].waiting = processes[i].turnaround - processes[i].burst;
                    processes[i].remaining = 0;
                    completed++;
                }
            }
        }
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < index; i += 2) {
        printf("P%d ", gantt_chart[i]);
        if (i + 1 < index) {
            printf("--> ");
        }
    }
    printf("\n\n");

    float total_turnaround = 0, total_waiting = 0;
    for (int i = 0; i < n; i++) {
        total_turnaround += processes[i].turnaround;
        total_waiting += processes[i].waiting;
    }

    printf("Process\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", total_waiting / n);
}

int main() {
    Process processes[MAX_PROCESSES];
    int n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for Process P%d: ", processes[i].id);
        scanf("%d %d", &processes[i].arrival, &processes[i].burst);
        processes[i].remaining = processes[i].burst;
        processes[i].turnaround = 0;
        processes[i].waiting = 0;
    }

    printf("Enter time quantum: ");
    scanf("%d", &time_quantum);

    calculateTimes(processes, n, time_quantum);

    return 0;
}
