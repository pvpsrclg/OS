Q1)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_CMD_LEN 1024
#define MAX_ARGS 100

void count_characters(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening file");
        return;
    }

    int count = 0;
    char ch;
    while ((ch = fgetc(file)) != EOF) {
        count++;
    }

    fclose(file);
    printf("Number of characters in '%s': %d\n", filename, count);
}

void count_words(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening file");
        return;
    }

    int count = 0;
    char word[100];
    while (fscanf(file, "%s", word) != EOF) {
        count++;
    }

    fclose(file);
    printf("Number of words in '%s': %d\n", filename, count);
}

int main() {
    char command[MAX_CMD_LEN];

    while (1) {
        printf("myshell$ ");
        if (fgets(command, sizeof(command), stdin) == NULL) {
            break;
        }

        command[strcspn(command, "\n")] = 0;

        char *args[MAX_ARGS];
        char *token = strtok(command, " ");
        int i = 0;

        while (token != NULL && i < MAX_ARGS - 1) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (i > 0) {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Error creating child process");
                continue;
            } else if (pid == 0) {
                if (strcmp(args[0], "count") == 0 && i == 3) {
                    if (strcmp(args[1], "c") == 0) {
                        count_characters(args[2]);
                    } else if (strcmp(args[1], "w") == 0) {
                        count_words(args[2]);
                    } else {
                        printf("Unknown command option: %s\n", args[1]);
                    }
                } else {
                    printf("Unknown command: %s\n", args[0]);
                }
                exit(0);
            } else {
                wait(NULL);
            }
        }
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int priority;
    int waiting;
    int turnaround;
} Process;

void calculatePriorityScheduling(Process processes[], int n) {
    int completed = 0, time = 0, total_waiting = 0, total_turnaround = 0;
    int gantt_chart[100];
    int gantt_index = 0;

    while (completed < n) {
        int idx = -1;
        int highest_priority = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].burst > 0) {
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            gantt_chart[gantt_index++] = processes[idx].id;
            time += processes[idx].burst;
            processes[idx].turnaround = time - processes[idx].arrival;
            processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
            total_waiting += processes[idx].waiting;
            total_turnaround += processes[idx].turnaround;
            processes[idx].burst = 0;
            completed++;
        } else {
            time++;
        }
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < gantt_index; i++) {
        printf("P%d ", gantt_chart[i]);
        if (i < gantt_index - 1) {
            printf("--> ");
        }
    }
    printf("\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time, burst time and priority for Process P%d: ", processes[i].id);
        scanf("%d %d %d", &processes[i].arrival, &processes[i].burst, &processes[i].priority);
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }

    calculatePriorityScheduling(processes, n);
    return 0;
}

