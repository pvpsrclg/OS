Q1)
#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10
#define MAX_REF_STRING 100

void fifo_page_replacement(int reference_string[], int n, int n_frames) {
    int memory[MAX_FRAMES] = {-1}; 
    int page_faults = 0;
    int frame_index = 0; 

    for (int i = 0; i < n; i++) {
        int page = reference_string[i];
        int found = 0;

      
        for (int j = 0; j < n_frames; j++) {
            if (memory[j] == page) {
                found = 1; 
                break;
            }
        }

        if (!found) { 
            if (frame_index < n_frames) {
                memory[frame_index] = page; 
                frame_index++;
            } else {
                
                memory[frame_index % n_frames] = page; 
            }
            page_faults++; 
        }

        
        printf("Reference: %d, Memory: ", page);
        for (int j = 0; j < n_frames; j++) {
            if (memory[j] != -1) {
                printf("%d ", memory[j]);
            }
        }
        printf(", Page Faults: %d\n", page_faults);
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
}

int main() {
    int reference_string[MAX_REF_STRING];
    int n, n_frames;

   
    printf("Enter the number of frames: ");
    scanf("%d", &n_frames);
    if (n_frames > MAX_FRAMES) {
        printf("Maximum number of frames is %d\n", MAX_FRAMES);
        return 1;
    }

    
    printf("Enter the size of the reference string: ");
    scanf("%d", &n);
    if (n > MAX_REF_STRING) {
        printf("Maximum size of reference string is %d\n", MAX_REF_STRING);
        return 1;
    }

    
    printf("Enter the reference string (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &reference_string[i]);
    }

   
    fifo_page_replacement(reference_string, n, n_frames);

    return 0;
}

Q2)
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
void make_toks(char *s, char *tok[])
{
 int i=0;
char *p;
 p = strtok(s," ");
 while(p!=NULL)
 { tok[i++]=p;
 p=strtok(NULL," ");
 }
 tok[i]=NULL;
}
void list(char *dn, char op)
{
 DIR *dp;
 struct dirent *entry;
int dc=0,fc=0;
 dp = opendir(dn);
 if(dp==NULL)
 {
 printf("Dir %s not found.\n",dn);
 return;
 } 
switch(op)
 {
 case 'f':
 while(entry=readdir(dp))
 {
 if(entry->d_type==DT_REG)
 printf("%s\n",entry->d_name);
 } break;
 case 'n':
 while(entry=readdir(dp))
 {
 if(entry->d_type==DT_DIR) dc++;
 if(entry->d_type==DT_REG) fc++;
 }
 printf("%d Dir(s)\t%d File(s)\n",dc,fc);
 break;
 case 'i':
 while(entry=readdir(dp))
 {
 if(entry->d_type==DT_REG)
 printf("%s\t%lu\n",entry->d_name,entry->d_fileno);  }
 }
 closedir(dp);
}
int main() {
 char buff[80],*args[10];
 int pid;
while(1)
 {
 printf("myshell$");
fflush(stdin);
fgets(buff,80,stdin);
buff[strlen(buff)-1]='\0';
 make_toks(buff,args);
if(strcmp(args[0],"list")==0)
 list(args[2],args[1][0]);
 else
 {
 pid = fork();
 if(pid>0)
 wait();
 else
 {
if(execvp(args[0],args)==-1)
 printf("Bad command.\n");
 }
 }
 }
 return 0;
} 