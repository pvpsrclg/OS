Q1)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        int nice_value = 10;
        if (nice(nice_value) == -1) {
            perror("Failed to change priority");
            exit(1);
        }
        printf("I am the Child Process. My PID is %d and my nice value is now %d.\n", getpid(), nice(0));
        for (volatile int i = 0; i < 100000000; i++);
    } else {
        printf("I am the Parent Process. My PID is %d.\n", getpid());
        wait(NULL);
        printf("Child process has finished.\n");
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int priority;
    int waiting;
    int turnaround;
} Process;

void calculateScheduling(Process processes[], int n) {
    int total_waiting = 0, total_turnaround = 0;
    int completed = 0, time = 0;
    int gantt_chart[100];
    int gantt_index = 0;

    while (completed < n) {
        int idx = -1;
        int highest_priority = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].burst > 0) {
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            gantt_chart[gantt_index++] = processes[idx].id;
            time += processes[idx].burst;
            processes[idx].waiting = time - processes[idx].arrival - processes[idx].burst;
            processes[idx].turnaround = time - processes[idx].arrival;
            total_waiting += processes[idx].waiting;
            total_turnaround += processes[idx].turnaround;
            processes[idx].burst = 0;
            completed++;
        } else {
            time++;
        }
    }

    printf("\nGantt Chart:\n");
    for (int i = 0; i < gantt_index; i++) {
        printf("P%d ", gantt_chart[i]);
        if (i < gantt_index - 1) {
            printf("--> ");
        }
    }
    printf("\n");

    printf("Process\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround, processes[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting / n);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time, burst time, and priority for Process P%d: ", processes[i].id);
        scanf("%d %d %d", &processes[i].arrival, &processes[i].burst, &processes[i].priority);
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
    }

    calculateScheduling(processes, n);
    return 0;
}
